module 2021aut.lec.lec09 where

open import lib

not : ùüö ‚Üí ùüö
not = Œª a ‚Üí if a then ff else tt

eqb : ùüö ‚Üí ùüö ‚Üí ùüö
eqb = Œª a b ‚Üí if a then b else not b

Eqb : ùüö ‚Üí ùüö ‚Üí Set
Eqb = Œª a b ‚Üí if eqb a b then ‚ä§ else ‚ä•

Eq‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
Eq‚Ñï zero zero = ‚ä§
Eq‚Ñï zero (suc n) = ‚ä•
Eq‚Ñï (suc m) zero = ‚ä•
Eq‚Ñï (suc m) (suc n) = Eq‚Ñï m n

canv1 : Œ£ ‚Ñï (Œª x ‚Üí Eq‚Ñï x (suc x) ‚Üí Eq‚Ñï (suc x) x)
canv1 = 0 , Œª b ‚Üí b

canv2 : Œ£ (‚Ñï ‚Üí ‚Ñï ‚Üí Set) (Œª R ‚Üí (R zero zero ‚Üî R (suc zero) (suc zero)))
canv2 = (Œª _ _ ‚Üí ‚ä§) , _

R : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
R zero    _ = ‚ä§
R (suc _) _ = ‚ä•

canv2' : Œ£ (‚Ñï ‚Üí ‚Ñï ‚Üí Set)
  (Œª R ‚Üí ¬¨ (R zero zero ‚Üî R (suc zero) (suc zero)))
-- canv2' = R , Œª w ‚Üí œÄ‚ÇÅ w triv
canv2' = (Œª m n ‚Üí rec ‚ä§ (Œª _ ‚Üí ‚ä•) m) , Œª w ‚Üí œÄ‚ÇÅ w triv

canv3 : ¬¨ (Œ£ ùüö (Œª x ‚Üí ¬¨ Eqb x x))
canv3 = Œª w ‚Üí
  indùüö (Œª x ‚Üí ¬¨ Eqb x x ‚Üí ‚ä•) (Œª f ‚Üí f triv) (Œª f ‚Üí f triv) (œÄ‚ÇÅ w) (œÄ‚ÇÇ w)
--  ¬¨ Eqb tt tt ‚Üí ‚ä• = (¬¨ ‚ä§) ‚Üí ‚ä• = (‚ä§ ‚Üí ‚ä•) ‚Üí ‚ä•

canv4 : ¬¨ (Œ£ Set (Œª A ‚Üí ‚ä•)) -- Set √ó ‚ä•
canv4 = Œª w ‚Üí œÄ‚ÇÇ w

canv5 : Œ£ ùüö (Œª x ‚Üí ¬¨ Eqb x tt)
canv5 = ff , Œª b ‚Üí b

eqb-refl : (x : ùüö) ‚Üí Eqb x x
-- eqb-refl = indùüö (Œª x ‚Üí Eqb x x) triv triv
eqb-refl tt = triv
eqb-refl ff = triv

notnot : (x : ùüö) ‚Üí Eqb x (not (not x))
notnot = indùüö (Œª x ‚Üí Eqb x (not (not x))) triv triv

eqb-sym : (x y : ùüö) ‚Üí Eqb x y ‚Üí Eqb y x
eqb-sym = indùüö (Œª x ‚Üí (y : ùüö) ‚Üí Eqb x y ‚Üí Eqb y x)
  (indùüö (Œª y ‚Üí Eqb tt y ‚Üí Eqb y tt) _ (Œª x ‚Üí x))
  (indùüö (Œª y ‚Üí Eqb ff y ‚Üí Eqb y ff) (Œª x ‚Üí x) _)

eqb-sym' : (x y : ùüö) ‚Üí Eqb x y ‚Üí Eqb y x
eqb-sym' tt tt = _
eqb-sym' tt ff = Œª x ‚Üí x
eqb-sym' ff tt = Œª x ‚Üí x
eqb-sym' ff ff = _

transportb : (P : ùüö ‚Üí Set){x y : ùüö} ‚Üí Eqb x y ‚Üí P x ‚Üí P y
transportb P {tt} {tt} _ u = u
transportb P {ff} {ff} e  u = u

eqb-sym'' : (x y : ùüö) ‚Üí Eqb x y ‚Üí Eqb y x
eqb-sym'' = Œª x y e ‚Üí
  transportb (Œª z ‚Üí Eqb z x) {x}{y} e (eqb-refl x)
-- P z = Eqb z x
-- Eqb x y ‚Üí P x     ‚Üí P y
-- Eqb x y ‚Üí Eqb x x ‚Üí Eqb y x

eqb-trans : (x y z : ùüö) ‚Üí Eqb x y ‚Üí Eqb y z ‚Üí Eqb x z
eqb-trans x y z e e' = transportb
  (Œª w ‚Üí Eqb w z) {y}{x} (eqb-sym x y e) e' 
-- P w = Eqb w z
-- Eqb x y ‚Üí P x     ‚Üí P y
-- Eqb y x ‚Üí Eqb y z ‚Üí Eqb x z

eqn-refl : (n : ‚Ñï) ‚Üí Eq‚Ñï n n
eqn-refl = ind‚Ñï (Œª n ‚Üí Eq‚Ñï n n)
  triv
  (Œª n ih ‚Üí ih)

eqn-refl' : (n : ‚Ñï) ‚Üí Eq‚Ñï n n
eqn-refl' zero = triv
eqn-refl' (suc n) = eqn-refl' n

nocycle : (n : ‚Ñï) ‚Üí ¬¨ Eq‚Ñï n (suc n)
nocycle = ind‚Ñï (Œª n ‚Üí ¬¨ Eq‚Ñï n (suc n))
  (Œª b ‚Üí b)
  (Œª n ih ‚Üí ih)

zero‚â†suc : {x : ‚Ñï} ‚Üí ¬¨ Eq‚Ñï zero (suc x)
zero‚â†suc = Œª b ‚Üí b

suc-inj : {x y : ‚Ñï} ‚Üí Eq‚Ñï (suc x) (suc y) ‚Üí Eq‚Ñï x y
suc-inj = Œª e ‚Üí e

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
-- _+_ = Œª x y ‚Üí rec y suc x
zero + y = y
suc n + y = suc (n + y)

-- x + z = x + z' -> z = z'
+-inj‚ÇÅ : (x z z' : ‚Ñï) ‚Üí Eq‚Ñï (x + z) (x + z') ‚Üí Eq‚Ñï z z'
+-inj‚ÇÅ x z z' = ind‚Ñï (Œª x ‚Üí Eq‚Ñï (x + z) (x + z') ‚Üí Eq‚Ñï z z')
  (Œª e ‚Üí e)
  (Œª n e ‚Üí e)
  x

-- ‚Ñï +-al kommutativ monoidot (k. egysegelemes felcsoportot) alkotnak

+-assoc : (k m n : ‚Ñï) ‚Üí Eq‚Ñï ((k + m) + n) (k + (m + n))
+-assoc k m n = ind‚Ñï (Œª k ‚Üí Eq‚Ñï ((k + m) + n) (k + (m + n)))
  (eqn-refl (m + n))
  (Œª n ih ‚Üí ih)
  k
