open import Lib

n : ℕ   -- Nat   ℕ
n = 3 + 2
{-
(λ f → (λ x → f (f x x) (x + 1))) : (ℕ → ℕ → ℕ) → ℕ → ℕ
  f : ℕ → ℕ → ℕ
  x : ℕ

Γ⊢t : A → B    Γ⊢u : A      Γ,x : A ⊢ t : B                              
----------------------    ----------------------    ---------------     ---------(n egy szam)
     Γ⊢t u : B             Γ ⊢ (λ x → t) : A → B    Γ,x : A ⊢ x : A   Γ ⊢ n : ℕ

→ eliminacios szabalya     → bevezeto            valtozo szabaly

_+_ : ℕ → (ℕ → ℕ)         (ℕ → ℕ) → ℕ

   →                         →
   /\                       / \
  ℕ  →                     →   ℕ
     /\                   / \
    ℕ  ℕ                 ℕ  ℕ

      -------------------  -----
      f:ℕ→ℕ→ℕ,x:ℕ⊢f:ℕ→ℕ→ℕ  Γ⊢x:ℕ
      ----------------------------  -----          -------------------  -----------
                         Γ⊢f x:ℕ→ℕ  Γ⊢x:ℕ         f:ℕ→ℕ→ℕ,x:ℕ⊢_+_:ℕ→(ℕ→ℕ)  f:ℕ→ℕ→ℕ,x:ℕ⊢x:ℕ
-----------------------  -------------------       --------------------------------   ---------------
f:ℕ→ℕ→ℕ,x:ℕ ⊢ f : ℕ→ℕ→ℕ  f:ℕ→ℕ→ℕ,x:ℕ⊢f x x:ℕ       f:ℕ→ℕ→ℕ,x:ℕ⊢_+_ x : ℕ→ℕ                f:ℕ→ℕ→ℕ,x:ℕ ⊢ 1 : ℕ
--------------------------------------------       ----------------------------------------------
f:ℕ→ℕ→ℕ,x:ℕ ⊢ f ((f x) x) : ℕ → ℕ                      f:ℕ→ℕ→ℕ,x:ℕ ⊢ (_+_ x) 1 : ℕ
--------------------------------------------------------------
f:ℕ→ℕ→ℕ,x:ℕ ⊢ f ((f x) x) ((_+_ x) 1) : ℕ
-------------------------------------------------
f : ℕ→ℕ→ℕ ⊢ (λ x → (f ((f x) x)) ((_+_ x) 1)) : ℕ → ℕ
-----------------------------------------------------------
(λ f → (λ x → (f ((f x) x)) ((_+_ x) 1))) : (ℕ→ℕ→ℕ) → ℕ → ℕ

_+_ : ℕ → (ℕ → ℕ)   2 : ℕ
--------------------------
     _+_ 2 : ℕ → ℕ           3 : ℕ
     -------------------------------
             (_+_ 2) 3 : ℕ

                     ...
-------------    -------------
... ⊢ f : ℕ→ℕ    ... ⊢ f x : ℕ
------------------------------
f:ℕ→ℕ,x:ℕ ⊢ f(f x) : ℕ
-------------------------
f:ℕ→ℕ ⊢ λx→f(f x):ℕ→ℕ                        ...
-----------------------------        --------------
(λ f x → f (f x)) : (ℕ→ℕ)→ℕ→ℕ        (_+_ 1) : ℕ→ℕ
--------------------------------------------------
(λ f x → f (f x)) (_+_ 1) : ℕ → ℕ                      2 : ℕ
------------------------------------------------------------
(λ f x → f (f x)) (_+_ 1)  2 : ℕ


 
     space          (())()             /\
      /  \                             | 
   space  3
    / \             ((()))             |
  _+_  2                               |
                                       |

                          λ
                         / \
(λ x → (_+_ x) 2)      x  space
                           /  \
                        space  2
                        /   \
                       _+_   x

α pl.:    (λ x → x) = (λ y → y) = (λ zz → zz)
          (λ x y → y) = (λ y x → x)
          (λ x → x + 1) = (λ y → y + 1)

"kotott valtozo neve nem szamit"

   10
   ∫  1/x dx
   0
   
  100        10   3
   Σ (j^2)   Σ  ( Σ i+i*2 ) = 11 * (3 + 6 + 9) = 
  j=0        i=0  i=0


int fgv(int alma) {
  return (alma + 2 + alma);
}
  
β:    (λ x → t) u = t[x ↦ u]

      (λ x → x + (3 * x)) (2 + 1) = (x + (3 * x))[x ↦ (2 + 1)] =
                    ((2 + 1) + (3 * (2 + 1))) =(alt.isk) 3 + 9 = 12

       t : A → B
----------------------η
   t = (λ x → t x)


(λ x → (λ x → x)) 3 = (λ x → x)[x ↦ 3] = (λy→y)[x↦3] = (λy→y) =(λx→x)
(λ x → (λ x → x + 1)) 3 = (λ y → y + 1)[x↦3]
  elfedes (shadowing)

(λ x → (λ y → x + y)) y = (λ y → x + y)[x ↦ y] = (λ z → x + z)[x↦y]
                           = λ z → y + z
  capture (elkapas)

Andrew Pitts: Nominal sets

-}
-- ez az eloadas 1 perccel rovidebb

-- id :: a -> a
id : {A : Set} → A → A
id x = x

_∘_ : {A B C : Set} → (B → C) → (A → B) → (A → C)
f ∘ g = λ a → f (g a)

square : ℕ → ℕ
square x = x * x

add2 : ℕ → ℕ
add2 x = 2 + x

-- (square ∘ add2) 3 = square (add2 3) = square (2 + 3) = square 5 = 25
-- (add2 ∘ square) 3 = add2 (square 3) = add2 9 = 11
-- square ∘ add2

postulate
  isEven : ℕ → Bool

