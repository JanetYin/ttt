0:00-0:10	röpi
0:10-0:13	megbeszélés, ha kell
0:13-0:18	ℕ∞→ℕ még egyszer
0:18-0:23	Fin elmagyarázása
0:23-0:25	töltsék ki a lyukakat akkor aszerint, amit megbeszéltünk
0:25-0:27	és nézzétek, a rejtett paramétereket simán kitörölhetem
0:27-0:31	_!!_ (még azt is tudja, hogy a vektor nem lehet üres, különben Fin 0 lenne)
0:31-0:34	mi a `the ℕ`? mese (ℕ∞-hoz is írtak literált)
0:34-0:36	fromℕ önállóan
0:36-0:38	de nézzétek; ott vannak a rejtett paraméterek igazából
0:38-0:39	fromList: nézzétek, de jó
0:39-0:41	önállóan
0:41-0:42	megbeszélés (de az a két _∷_ nem ugyanaz)
0:42-0:43	overloaded constructors
0:43-0:45	tabulate – n-re kell mintát illeszteni
0:45-0:48	lambdás befejezésre hagyok kis időt
0:48-0:50	megbeszélés
0:50-0:53	szigma
0:53-0:55	filter
0:55-0:58	izomorfizmusok; elsőt elmutogatom (nézzétek, típusokra is lehet if_then_else_)
0:58-1:02	mi a Π? miért Σ meg Π? és ott miért _≡_ van?
1:02-1:04	dependentCurry megértése (de valójában ugyanúgy kell megírni)
1:04-1:07	∀×-distr
		(igazából itt látszik, hogy a függő típus valójában nem is bonyolítja meg annyira)
		meg is lehet önállóan otthon vagy itt
1:07-1:10	Bool=Fin2 (itt véges sok elem van; simán összepárosítjuk őket)
1:10-1:13	Fin1+3=Fin4 önállóan (az 1 + 3 ≡ 4-et kitalálja)
1:13-1:15	megbeszélés
1:15-1:17	inj₁f
1:17-1:21	inj₂f (és jé, ott a rejtett paraméterre is tudok mintát illeszteni;
		arra, hogy ez hányas Fin)
1:21-1:22	és nézzétek, az f így megy
1:22-1:25	f⁻¹ önállóan
1:25-1:28	megbeszélés
1:28-1:30	röpi témája; házi

otthonra:
Σ=×
→=×
dependentCurry
∀×-distr
casef
