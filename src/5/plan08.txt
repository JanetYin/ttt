0:00-0:10	röpi
0:10-0:13	megbeszélés, ha kell
0:13-0:18	_+∞_ még egyszer (a kommentes lehetne, de termination checking failed)
0:18-0:20	ℕ∞→ℕ gyorsan elmagyarázva
0:20-0:22	koiterátor elmutogatva (seed, dobozok)
0:22-0:27	Vec (és itt jön be, ami miatt igazán jó az Agda)
0:27-0:32	függő típusokról általában (picit mint az array<9> C++-ban; csak sokkal okosabb)
0:32-0:35	tail; ott látszik (nem üreset nem is tudsz megadni – nincs több 42-zés)
0:35-0:37	countDownFrom önállóan (mint listánál)
0:37-0:39	de az a menő ebben, hogy még elrontani sem tudom;
		ha nem olyan hosszút adok meg, fordítási időben panaszkodik
0:39-0:44	Fin elmagyarázása
0:44-0:46	töltsék ki a lyukakat akkor aszerint, amit megbeszéltünk
0:46-0:48	és nézzétek, a rejtett paramétereket simán kitörölhetem
0:48-0:52	_!!_ (még azt is tudja, hogy a vektor nem lehet üres, különben Fin 0 lenne)
0:52-0:55	mi a the ℕ? mese (ℕ∞-hoz is írtak literált)
0:55-0:57	fromℕ önállóan
0:57-0:59	de nézzétek; ott vannak a rejtett paraméterek igazából
0:59-1:00	fromList: nézzétek, de jó
1:00-1:02	önállóan
1:02-1:03	megbeszélés (de az a két _∷_ nem ugyanaz)
1:03-1:04	overloaded constructors
1:04-1:06	tabulate – n-re kell mintát illeszteni
1:06-1:09	lambdás befejezésre hagyok kis időt
1:09-1:11	megbeszélés
1:11-1:14	szigma
1:14-1:16	filter
1:16-1:19	izomorfizmusok; elsőt elmutogatom (nézzétek, típusokra is lehet if_then_else_)
1:19-1:23	mi a Π? miért Σ meg Π? és ott miért _≡_ van?
1:23-1:25	dependentCurry megértése (de valójában ugyanúgy kell megírni)
1:25-1:28	∀×-distr
		(igazából itt látszik, hogy a függő típus valójában nem is bonyolítja meg annyira)
1:28-1:30	házi; röpi témája

otthonra:
map
_++_
Σ=×
→=×
dependentCurry
∀×-distr
