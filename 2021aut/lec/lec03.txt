λ x → x tt =
(λ y → y tt) : (𝟚 → C) → C
  tt : 𝟚
  y tt : C
  y : 𝟚 → C
  (λ y → y tt) : (𝟚 → C) → C

(λ x y → y) ff =
(λ x → (λ y → y)) ff =(→ szamitas)
(λ y → y)[x ↦ ff] =
(λ y → y)         =
(λ y → y)[x ↦ tt] =(→ szamitas)
(λ x → (λ y → y)) tt =
(λ x y → y) tt

u : A   v : A → A   t : ℕ
-------------------------
rec u v t : A

rec u v zero = u
rec u v (suc n) = v (rec u v n)

rec u v t = ... = t-ben a zero-t u-ra, a suc-okat v-re csereljuk

_*2+3

t := λ x → rec (suc (suc (suc zero))) (λ n → suc (suc n)) x	
t := λ x → rec (suc zero) (λ n → suc (suc n)) (suc x) =
               \________/ \_________________/ \_____/
                  u            v               suc n
                  
     λ x → suc (suc (rec (suc zero) (λ n → suc (suc n)) x))

t := λ x → rec (suc (suc zero)) (λ n → suc (suc (suc n))) x	

 t 2 = t (suc (suc zero)) = 3+3+2 = 8

t := λ x → suc (suc (suc (rec zero (λ n → suc (suc n)) x)))	

bev,elim,szamitasi,egyediseg

                              ------------------ ℕ bev1
  x : ℕ → B,felt.x:ℕ→B        zero : ℕ, felt.x:A
  ----------------------------------------------  → elim
  x zero : B, felteve hogy x : ℕ→B
---------------------------------- → bevezeto
(λ x → (x zero)) : (ℕ → B) → B

  t : B, felteve, hogy x : A       f : A → B    u : A
  ---------------------------      -------------------
  (λ x → t) : A → B                   f u : B


   λ
   /\
  x  _
     /\
    x  zero

(1+2)+3       1+(2+3)

   +              +
  /\             /\
 +  3           1  +
/\                / \
1 2              2   3




h = λ n → rec (λ b → b) (λ f b → if b then ff else f tt) n ff

g := (λ f b → if b then ff else f tt)
h 3 = h (suc (suc (suc zero))) = (g (g (g (λ b → b)))) ff
g (g (g (λ b → b))) =
g (g (λ b → if b then ff else tt)) =
g (g not) =
g (b → if b then ff else not tt) ugyanugy viselkedik, mint
g (λ b → ff) =
(λ b → if b then ff else (λ b → ff) tt) =
(λ b → if b then ff else ff) ugyanugy viselkedik, mint
λ b → ff

----------------------------------------------------

𝟚
→
ℕ

zero:ℕ,   ha t:ℕ, akkor suc t : ℕ

u : A   v : A → A   t : ℕ
-------------------------
rec u v t : A

rec u v zero = u
rec u v (suc n) = v (rec u v n)


x                                    rec u v x
-------------------------------------------------
0 = zero                             u
1 = suc zero                         v u
2 = suc (suc zero)                   v (v u)
3 = suc (suc (suc zero))             v (v (v u))
4 = suc (suc (suc (suc zero)))       v (v (v (v u)))
...                                  ...

eq0 : ℕ → 𝟚
eq0 = λ n → rec tt v n
  v : 𝟚 → 𝟚
  v = (λ _ → ff)

0 = zero                             tt =              tt
1 = suc zero                         (λ _ → ff) tt = ff[_→tt]= ff
2 = suc (suc zero)                   v (v tt)          ff
3 = suc (suc (suc zero))             v (v (v tt))      ff
4 = suc (suc (suc (suc zero)))       v (v (v (v tt)))  ff

plus : ℕ → (ℕ → ℕ)
plus = λ x y → rec y suc x

x                                    plus x y
----------------------------------------------
0 = zero                             y
1 = suc zero                         suc y
2 = suc (suc zero)                   suc (suc y)
3 = suc (suc (suc zero))             suc (suc (suc y))
4 = suc (suc (suc (suc zero)))       suc (suc (suc (suc y)))

plus' : ℕ → (ℕ → ℕ)
plus' = λ x y → rec x suc y


plus 3 4 = 7
plus 0 x =
  (λ x y → rec y suc x) 0 x =
  rec x suc 0 =
  rec x suc zero =
  x
plus' 0 x =
  (λ x y → rec x suc y) 0 x =
  rec 0 suc x ≠
  x
plus' x 0 =
  (λ x y → rec x suc y) x 0 =
  rec x suc 0 = x
plus x 0 =
  (λ x y → rec y suc x) x 0 =
  rec 0 suc x ≠
  x

----------------------------------------------------

tetsz A, B tipusokra A × B tipus   \times

bev: u : A es v : B, akkor (u , v) : A × B
elim: ha t : A × B, akkor π₁ t : A
                          π₂ t : B
szamitasi: π₁ (u , v) = u
           π₂ (u , v) = v
egyediseg: (π₁ t , π₂ t) = t
           
   Haskell: (u , v) : (A , B), fst, snd

uncurry : (𝟚 → ℕ → 𝟚) → 𝟚 × ℕ → 𝟚
uncurry = λ f → λ x → f (π₁ x) (π₂ x)
  f : 𝟚 → ℕ → 𝟚
  x : 𝟚 × ℕ
  ? : 𝟚
  π₁ x : 𝟚
  π₂ x : ℕ
  f (π₁ x) : ℕ → 𝟚
  f (π₁ x) (π₂ x) : 𝟚

uncurry : (A → B → C) → A × B → C
uncurry = λ f → λ x → f (π₁ x) (π₂ x)
  f : A → B → C
  x : A × B
  π₁ x : A
  π₂ x : B

(A → B × C)
  A → B
  A → C

(λ x → x)  =  (λ x → (π₁ x , π₂ x))

fib : ℕ → ℕ
fib 0 = 1
fib 1 = 1
fib 2 = 2
fib 3 = 3
fib 4 = 5

...

x                       rec (0 , 1) (λ w → (π₂ w , π₁ w + π₂ w)) x
-------------------     ----------------------------
zero                    (0 , 1)
suc zero                (1 , 1)
suc (suc zero)          (1 , 2)
suc (suc (suc zero))    (2 , 3)
4                       (3 , 5)
5                       (5 , 8)
6                       (8 , 13)
                        ...
fib = λ x → π₂ (rec (0 , 1) (λ w → (π₂ w , π₁ w + π₂ w)) x)

-----------------------------------------------------------

⊥ egy tipus   bottom, \bot
ha t : ⊥ es A egy tipus, akkor exfalso t : A

⊤ egy tipus  \top        Haskell ()    void
triv : ⊤


f : ⊥ → ℕ
f = λ b → exfalso b


  data Void
  x :: Void
  x = undefined
  data () = ()


osszeg tipus
A es B tipusok, akkor A ⊎ B is egy tipus  \u+
bev: ha u : A, akkor ι₁ u : A ⊎ B   \iota\_1
        v : B, akkor ι₂ v : A ⊎ B
elim: ha u : A → C, v : B → C, es t : A ⊎ B, akkor case t u v : C
szamit: case (ι₁ t) u v = u t
        case (ι₂ t) u v = v t
nincs egyediseg
